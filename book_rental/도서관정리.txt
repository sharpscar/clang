

인터페이스란 ? 
인터페이스와 리모콘으로 비유할수 있다.

왜 인터페이스를 쓸까?
왜 리모콘을 쓸까?
우리는 tv 그러니까 셋탑에서 채널이동
요즘은 유튜브를 자주보니까 버튼 누르고
*** 라고 말하면 유튜브에서 자동으로 관련 컨텐츠를 찾아준다.
왜 리모콘을 사용하느냐? 유튜브를 컨트롤 하려고

우리는 왜 인터페이스라는 리모콘을 사용할까?
인터페이스로 자료를 좀더 잘 컨트롤 하기위해서가 아닐까
그럼 지금까지는 자료를 잘 컨트롤 못했단 말인가?
자료가 방대해지고 요구에따라 동적으로 자료를 제어하기위해서
인터페이스를 이용한다고 생각한다. 
인터페이스와 abstract라는 용어가 등장한다.
추상화  그러니까 구현을 하는것은 다른곳에서 일어나지만
책에서는 list와 item 자료형을 만든다. 
책935페이지에서는 list.h 인터페이스 헤더 파일과
941페이지에서는 실제 list.c 파일을 통해서 리스트를 구현한다.


사서의 인터페이스 (유희라님 자료)

1. 로그인
프로그램 실행 
사서 id / 비밀번호 입력하면 -> 서버로 로그인을 요청
로그인 성공시 -> 사서 전용 메뉴로 진입

2. 사서의 메인 메뉴
1. 도서등록                             bool addItem (Item item, List *pList)
2. 도서삭제                             bool subItem (Item item, List *pList)
3. 도서검색                             int retrive(Item item, List *pList)
4. 대출요청 확인 (실시간) -> 수신 스레드 이용 
5. 대출 승인/ 거절
6. 반납 처리 (개별/ 전체)
7. 대출 불가 도서 설정
8. 메시지함 (확인/답변/삭제)
9. 불량이용자 구제 요청
10. 이용자 계정 조회
11. 로그아웃 

3. 도서관리 
도서등록 : 책 정보 입력 -> 서버로 추가 요청
도서 삭제 : id 입력 -> 삭제 요청
도서 검색 : 제목 키워드 입력 -> 검색 결과 출력

4. 대출 처리
- 서버에서 대출 요청 실시간 수신
- 승인 또는 거절 선택 -> 서버에 응답 전송 

5. 반납 처리
- 개별 반납 : 사용자 id , 책 id 입력 -> 반납요청
- 전체 반납 : 대여id입력 -> 반납 완료 처리

6. 메시지 처리
-서버에 메시지 도착 알림 수신
- 메시지함 열기 -> 사용자 메시지 확인
- 답장 보내기 / 열람 처리 

7. 불량 이용자 관리
- 불량이용자 목록 조회 -> (서버)
- 특정 사용자 선택 -> (서버로) 구제 요청 

8. 계정 확인
- 사용자 id입력 -> 정보 확인

9. 로그 아웃
-> 메인 화면으로 이동
